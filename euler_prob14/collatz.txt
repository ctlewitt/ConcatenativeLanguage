define abs
{
  { dup 0 < }
  { 0 swap - }
  { }
  if
}


define mod {
  { abs } dip
  { dup } dip
  dup
  { / } dip
  *
  -
}



define even? {
  { 2 mod 0 == }
  { True }
  { False }
  if
}

-- takes number and replaces it with the next collatz number
define collatz_step {
  { dup even? }
  { 2 / }
  { 3 * 1 + }
  if
}

define print_collatz_sequence {
  { dup 1 > }
  {
    collatz_step
    print
  }
  while
}

define collect_collatz_seq {
  { arr_create } dip
  { dup 1 > }
  {
    { arr_append } keep
    collatz_step
  }
  while
  arr_append
}

define not {
  { True == }
  { False }
  { True }
  if
}

-- dict num
define temp {
  { 1 1 dict_set } dip
  { arr_create } dip
  show_stack
  rot over
  show_stack
  dict_get
  show_stack
  is_none not
  show_stack
}


-- tests collatz, memoize, collatz
dict_create 13 collect_collatz_seq_w_term show_stack
memoize_seq show_stack
"after memoization" print_and_burn
26 collect_collatz_seq_w_term show_stack
"memoizing" print_and_burn
memoize_seq show_stack


-- takes dict num returns dict arr
-- example: dict_create 13 collect_collatz_seq_w_term show_stack
define collect_collatz_seq_w_term {
  { 1 1 dict_set } dip
  { arr_create } dip
  { rot over dict_get is_none }
  {
    -rot
    { arr_append } keep
    collatz_step
  }
  while
  -rot
  arr_append
}


--code to test memoize_seq
dict_create 1 1 dict_set show_stack
arr_create
1 arr_append
show_stack
memoize_seq
show_stack




-- takes a dict and a collatz sequence list
-- memoizes the length of each subsequence
-- returns updated dict
define memoize_seq {
  -1 arr_get
  { swap } dip
    dict_get
  { swap } dip
  swap
  { arr_len 0 != }
  {
    arr_pop
    -rot
    { dup { dict_set } dip 1 + } dip
  }
  while
  drop
  drop
}


-- test with:
-- dict_create 43 collect_and_memoize_seq show_stack
-- (dict num --> dict )
define collect_and_memoize_seq {
  collect_collatz_seq_w_term
  memoize_seq
}





-- num
define max_collatz_driver {




}






define manual_len_collatz_seq {
  { 1 } dip
  { None } dip
  { dup 1 > }
  {
    { 1 + } dip
    collatz_step
  }
  while
  drop

}



define len_collatz_seq {
  dup -rot
  { dict_get dup is_none }
  { drop swap dup manual_len_collatz_seq dup { dict_set } dip }
  { { { drop } dip } dip }
  if
}

define dup_2_params {
  { dup } dip
  dup
  { swap } dip
}

define max {
  dup_2_params
  { < }
  { { drop } dip }
  { drop }
  if
}

define print_and_burn {
  print drop
}

define do_collatz_from {
  { dup 1 >= }
  {
    dup len_collatz_seq
    swap 1 -
  }
  while
  drop
}



define set_up_for_collatz_with_dict {
  dup
  { rot } dip

}

define un_setup_for_collatz_with_dict {
  { -rot } dip

}


define max_collatz_len_from {
  { dict_create } dip

  { 0 } dip
  { dup 1 >= }
  {
    set_up_for_collatz_with_dict
    len_collatz_seq
    un_setup_for_collatz_with_dict
    swap 1 -
    { max } dip
  }
  while
  drop
}





-- todo!!!!
define for {
}




